version: '3'

services:

  nginx:
    build:
      args:
        - NGINX_VERSION=${D_NGINX_VERSION}
        - CERT_CONTENT=${D_SSL_CERT_CONTENT}
      context: .
      dockerfile: ./docker/webservers/nginx/Dockerfile
    container_name: "{$D_PROJECT_NAME}_nginx"
    env_file: .env
    networks:
      project:
    ports:
      - "80:${D_NGINX_HTTP_PORT}"
      - "443:${D_NGINX_HTTPS_PORT}"
    restart: on-failure
    volumes:
      - ./docker/webservers/nginx/conf:/etc/nginx/conf.d/:rw
      - docker-sync:/var/www/html:nocopy

  apache:
    build:
      args:
        - PHP_PORT=${D_PHP_PORT}
        - CERT_CONTENT=${D_SSL_CERT_CONTENT}
      context: .
      dockerfile: ./docker/webservers/apache/Dockerfile
    container_name: "{$D_PROJECT_NAME}_apache"
    env_file: .env
    networks:
      project:
    ports:
      - "80:${D_APACHE_HTTP_PORT}"
      - "443:${D_APACHE_HTTPS_PORT}"
    restart: on-failure
    volumes:
      - ./docker/webservers/apache/conf/vhosts:/etc/apache2/sites-available/:rw
      - docker-sync:/var/www/html:nocopy

  php:
    build:
      args:
        # General PHP vars
        - PHP_VERSION=${D_PHP_VERSION}
        - PHP_PORT=${D_PHP_PORT}
        - CERT_CONTENT=${D_SSL_CERT_CONTENT}

        # XDebug
        - PHP_XDEBUG_REMOTE_PORT=${D_PHP_XDEBUG_REMOTE_PORT}

        # PHP modules
        ## XDebug
        - INSTALL_XDEBUG=${D_INSTALL_XDEBUG}
        - X_REMOTE_ENABLE=${D_PHP_XDEBUG_REMOTE_ENABLE}
        - X_REMOTE_HOST=${D_PHP_XDEBUG_REMOTE_HOST}
        - X_REMOTE_AUTOSTART=${D_PHP_XDEBUG_REMOTE_AUTOSTART}
        - X_REMOTE_PORT=${D_PHP_XDEBUG_REMOTE_PORT}
        - X_IDEKEY=${D_PHP_XDEBUG_IDEKEY}
        ## Other PHP modules
        - INSTALL_PHPREDIS=${D_INSTALL_PHPREDIS}
        - INSTALL_INTL=${D_INSTALL_INTL}
        - INSTALL_IMAGIK=${D_INSTALL_IMAGIK}
        - INSTALL_PGSQL=${D_INSTALL_PGSQL}
        - INSTALL_MYSQL=${D_INSTALL_MYSQL}
        - INSTALL_MCRYPT=${D_INSTALL_MCRYPT}

        # FE tools
        - PREFERRED_NODE_VERSION=${D_PREFERRED_NODE_VERSION}
        - INSTALL_NVM=${D_INSTALL_NVM}
        - INSTALL_YARN=${D_INSTALL_YARN}
        - INSTALL_SASS=${D_INSTALL_SASS}
        - INSTALL_GULP=${D_INSTALL_GULP}
      context: .
      dockerfile: ./docker/php/Dockerfile
    container_name: "{$D_PROJECT_NAME}_php"
    env_file: .env
    environment:
      - PHP_IDE_CONFIG=serverName=docker-server
    networks:
      project:
      database:
    volumes:
      - docker-sync:/var/www/html:nocopy

  mysql:
    build:
      args:
        - MYSQL_VERSION=${D_MYSQL_VERSION}
      context: .
      dockerfile: ./docker/mysql/Dockerfile
    container_name: "{$D_PROJECT_NAME}_mysql"
    env_file: .env
    environment:
      - MYSQL_USER=${D_MYSQL_USER}
      - MYSQL_ROOT_PASSWORD=${D_MYSQL_ROOT_PASSWORD}
    networks:
      project:
      database:
        aliases:
          - mysql
    ports:
      - "33060:3306"
    restart: on-failure
    volumes:
      - ./docker/mysql/mydata:/var/lib/mysql/:rw

  postgres:
    build:
      args:
        - POSTGRES_VERSION=${D_POSTGRES_VERSION}
      context: .
      dockerfile: ./docker/postgres/Dockerfile
    container_name: "{$D_PROJECT_NAME}_postgresql"
    env_file: .env
    environment:
      - POSTGRES_USER=${D_POSTGRES_USER}
      - POSTGRES_PASSWORD=${D_POSTGRES_PASSWORD}
    networks:
      project:
      database:
        aliases:
          - postgres
    ports:
      - "54320:5432"
    restart: on-failure
    volumes:
      - ./docker/postgres/pgdata:/var/lib/postgresql/data/:rw

  redis:
    container_name: "{$D_PROJECT_NAME}_redis"
    image: redis:alpine
    networks:
      project:
    ports:
      - "63790:6379"

networks:
  project:
  database:

volumes:
  docker-sync:
    external: true